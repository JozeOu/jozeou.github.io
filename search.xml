<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[NLP 笔记（三）：]]></title>
    <url>%2F2019%2F05%2F09%2Fnlp-course-notes%2Fnlp-note3%2F</url>
    <content type="text"></content>
      <categories>
        <category>NLP</category>
      </categories>
      <tags>
        <tag>nlp</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ml-note3]]></title>
    <url>%2F2019%2F05%2F08%2Fmachine-learning-course-notes%2Fml-note3%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[NLP 笔记（二）：基本文字处理]]></title>
    <url>%2F2019%2F05%2F06%2Fnlp-course-notes%2Fnlp-note2%2F</url>
    <content type="text"><![CDATA[✎知识讲解 ✎正则表达式 正则表达式 (Regular Expressions) 是对字符串操作的一种逻辑公式，就是用事先定义好的一些特定字符、及这些特定字符的组合，组成一个规定字符串。 ✎基本语法 析取：字符集合[]，范围表示[A-Z] Pattern Matches [wW]oodchuck Woodchuck, woodchuck [1234567890] 任一数字 [A-Z] 任一大写字母 [a-z] 任一小写字母 [0-9] 任一数字 否定析取：[^Ss] (仅当&quot;^&quot;出现在字符集合模式[]的第一个字符时) Pattern Matches [^A-Z] 任一非大写字母 [^Ss] 既不是&quot;S&quot;也不是&quot;s&quot; a^b 与字段相同 其他析取：析取中的“|”，对匹配条件进行逻辑“或”运算 Pattern Matches groundhog|woodchuck groundhog 或 woodchuck a|b|c = [abc] 特殊字符：? * + . ^ $（要表示这些特殊符号本身，需要在其前加一个\进行转义） Pattern Matches ？ 匹配前面的子表达式一次或零次 * 匹配前面的子表达式任意次 + 匹配前面的子表达式一次或多次 . 匹配除&quot;\n&quot;和&quot;\r&quot;之外的任意单个字符 ^ 匹配输入字行首，如果设置了RegExp对象的Multiline属性，也匹配“\n”或“\r”之后的位置 $ 匹配输入字行尾，如果设置了RegExp对象的Multiline属性，也匹配“\n”或“\r”之前的位置 ✎举例 例子：找到文本中“the”的所有实例。 错解： [tT]he ，错误返回其他词汇，即匹配本不应被匹配的字符串（there，then，other） 错误类型：False positives（误报 Type I） the ，遗漏了大写字母开头的实例，即没有匹配到本应被匹配的字符串（The） 错误类型：False negatives（漏报 Type II） 处理错误：降低应用程序中的错误率通常涉及两种对立的工作： 提高准确性或精确度（最小化False positives） 提高覆盖率或召回度（最小化False negatives） ✎总结 正则表达式起着至关重要的作用。对于任何的文本处理来说，正则表达式通常是复杂序列的首选模型； 对于许多困难的任务，我们使用机器学习分类器，但是正则表达式将作为分类器中的特征值，在获取一般化时非常有用。 ✎字标记 ✎文本归一化 每个NLP任务都需要做文本归一化（Text Normalization）处理： 在运行文本中对单词进行分段、标记 规范字格式 在运行文本中对句子进行分段 ✎分词 问题：语言问题。不同语言差异较大，很难统一算法。 中文分词： 中文词汇是由汉字组成的，汉字通常含有一个音节和一个语素，每个词汇平均由2.4个汉字组成； 标准基线分割算法：最大匹配算法（也称贪心算法 - Greedy） ，对英语不适用 给定一个中文词汇表和一个字符串 在字符串开头启动指针 在字典中找到与从指针开始的字符串匹配的最长单词 将指针移动至越过此单词 跳至第 2 步重复此过程 ✎词语规范化 规范化 (Normalization)：信息检索需要规范化用语，索引文本 &amp; 查询字词必须有相同的格式。 大写转换 (Case folding)：由于用户倾向于使用小写字母，经常将所有字母转换为小写；对于情感分析，MT，信息提取等，字母的大小写转换是非常有帮助的。 词形还原 (Lemmatization)：将变形或变体形式转换为基本形式（如：am, are, is → be，car, cars, car’s, cars’ → car）。 语素： 构成单词的微小而有意义的单元 词干（stems）：核心含义单位 词缀（Affixes）：依附于词干上的单元，通常具有语法功能 ✎词干提取 定义：在信息检索中，将词语缩短至其词干形式。词干提取即是对词缀的粗略删减。 e.g. automate(s), automatic, automation all reduced to automat. 词干提取算法 (Porter’s algorithm) ✎句子划分与决策树 句子划分（Sentence Segmentation） ！，？是相对明确的标点符号 句号“.”的含义模糊 句子边界 缩写表示（Dr.） 数学表示（.02%） 构建二元分类器 Looks at a “.” Decides EndOfSentence / NotEndOfSentence Classifiers: hand-written rules, regular expressions, or machine-learning 决策树（Decision Tree） ，可用来确定单词是否为句子结尾。 决策树的实现： 决策树仅仅是 if-then-else 的语句，有趣的是其选择功能； 难以手动建立决策树结构：手动构建至适用于简单的特征及领域；对于数字要素，选择每个阈值太难，相反，结构通常通过机器学习从训练语料库中得出。 ✎练习 提取“hello world” 1234567import rekey = r"&lt;html&gt;&lt;body&gt;&lt;h1&gt;hello world&lt;h1&gt;&lt;/body&gt;&lt;/html&gt;"p = r"(?&lt;=&lt;h1&gt;).+?(?=&lt;h1&gt;)"pattern = re.compile(p)matcher = re.search(pattern, key)print(matcher.group(0)) 输出：hello world 匹配第一个“python” 1234567import rekey = r"javapythonhtmlvhdlpython"p = r"python"pattern = re.compile(p)matcher = re.search(pattern, key)print(matcher) 输出：&lt;re.Match object; span=(4, 10), match='python'&gt; 找到所有一级标题 123456import rekey = r"&lt;h1&gt;hello world&lt;h1&gt;" #源文本p = r"&lt;h1&gt;.+&lt;h1&gt;" #正则表达式规则pattern = re.compile(p)print(pattern.findall(key)) 输出：['&lt;h1&gt;hello world&lt;h1&gt;'] 匹配“http://”和“https://” 123456import rekey = r"http://www.poshoaiu.com and https://iusdhbfw.com" #源文本p = r"https?://" #正则表达式规则pattern = re.compile(p)print(pattern.findall(key)) 输出：['http://', 'https://'] 多字符匹配 1234567891011import rekey1 = r"12345&lt;hTml&gt;hello&lt;/Html&gt;67890"p1 = r"&lt;[Hh][Tt][Mm][Ll]&gt;.+?&lt;/[Hh][Tt][Mm][Ll]&gt;"pattern1 = re.compile(p1)print(pattern1.findall(key1))key2 = r"mat cat pat"p2 = r"[^p]at"pattern2 = re.compile(p2)print(pattern2.findall(key2)) 输出： 12[&apos;&lt;hTml&gt;hello&lt;/Html&gt;&apos;][&apos;mat&apos;, &apos;cat&apos;]]]></content>
      <categories>
        <category>NLP</category>
      </categories>
      <tags>
        <tag>nlp</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[NLP 笔记（一）：介绍 NLP]]></title>
    <url>%2F2019%2F05%2F06%2Fnlp-course-notes%2Fnlp-note1%2F</url>
    <content type="text"><![CDATA[✎从语言到信息 ✎从语言中提取信息 ✎含义 从以下内容自动提取句意和结构： 人类语言文本和演讲（新闻、社交媒体等） 社交网络 基因组序列 ✎应用实例 信息检索：每天6,586,013,574次网络搜索（估算），基于文本的信息检索很可能成为当今软件中最常用的功能 ； 文本分类：对短信、新闻进行分类； 提取情绪和社会语义：很多的意思都隐藏在内涵中（内涵：除单词的字面意思或主要意义之外，由其引发的想法或感觉。），通常称提取内涵为情感分析。如对餐厅评价进行情感分析，判断差评 or 好评； 计算生物学：比较基因序列；（序列比较的关键之处：寻找基因、决定功能、揭示进化进程。这也是拼写检查的工作方式。Hint：编辑距离算法） 社交网络：由您的亲朋好友组成的网络离线或在线关系。可以计算这些网络的属性，从中提取信息。（社交关系的结构：人作为节点，链接代表关系的建立） ✎通过语言与人类交互 对话系统/聊天机器人：Siri，Google assistant，Facebook M，Cortana等 推荐系统：网易云音乐推荐，豆瓣电影、图书推荐等 问答系统 ✎NLP 概述 ✎背景 为什么语言解释难以实现？ 语言有歧义 存在非标准语言 会不断产生新词 如何在这些问题上取得进展？ 需要什么工具？ 关于语言和世界的知识 一种结合各种知识体系的方法 怎么做？ 从语言数据建立概率模型 模型与算法 正则表达式 (Regular Expressions) 编辑距离与对齐方式 词嵌入（针对词义的向量/神经网络模型） 机器学习分类器（朴素贝叶斯/线性回归/神经网络） 推荐算法（协同过滤） 网络算法 (PageRank) 语言学工具（情绪词典 – Sentiment lexicons） ✎什么是 NLP？ **自然语言处理（NLP）**是计算机科学、 人工智能、 语言学的交集领域。 NLP的目标是让计算机处理或者“理解”自然语言，从而执行譬如预约、买东西、问题回答等有用的任务。但是充分理解和表达语言的含义（甚至定义语言）是件有难度的事情。达到完美的语言理解被称为 AI-complete[1]问题。 ✎NLP 层级 ✎NLP应用 从简单到复杂 拼写检查、关键字搜索、同义词查找 从网站提取信息，如产品价格、日期、地点、人员或公司名称 分类：阅读教材，判断长文本的积极/消极的情绪 机器翻译 口语对话系统 复杂的问答系统 NLP在工业上的应用越发广泛 搜索（书面或口头上） 在线广告匹配 自动/辅助翻译 市场或财务/交易的情绪分析 语音识别 聊天机器人/对话代理：自动化客户支持、控制设备、订购货物 ✎为什么NLP是一门困难的学科？ 表现、学习和使用语言/情景/世界/视觉知识的复杂性 人类语言具有不明确性（与编程和其他正式语言不同） 人类语言的解释取决于现实世界、常识和语境知识 ✎深度学习在NLP中的应用 深度 NLP = 深度学习 + NLP 即结合自然语言处理的思想和目标，采用表示学习和深度学习的方法来解决这些问题 。 深度 NLP 在各个层级上的表示方式都为向量。 在人工智能领域，最困难的问题被非正式地称为 AI-complete 或 AI-hard。——维基百科 ↩]]></content>
      <categories>
        <category>NLP</category>
      </categories>
      <tags>
        <tag>nlp</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Machine Learning 笔记（二）：单变量线性回归]]></title>
    <url>%2F2019%2F05%2F05%2Fmachine-learning-course-notes%2Fml-note2%2F</url>
    <content type="text"><![CDATA[线性回归 (Linear regression) 是一种以线性模型来建模自变量与因变量关系的方法。 分为： 单变量线性回归 (Linear regression with one variable)：只有一个自变量； 多变量线性回归 (Linear regression with multiple variable)：有多个自变量。 本篇先从单变量线性回归入手。 ✎模型表达 (Model representation) 一个预测房价的例子： 给定某地不同面积房子的价格的数据集，希望通过该数据集构建一个模型，该模型能根据房子的面积来预测其价格。 该例子属于 有监督学习 中的 回归 问题。 使用如下标记描述回归问题： m = Number of training examples （训练样例的数量） x’s = “input” variable / features （输入变量 / 特征） y’s = “output” variable / “target” variable （输出变量 / 目标变量） (x,y) - one training example （一个训练样例） (x(i),y(i)) - ith training example （第 i 个训练样例） h (hypothesis) - hθ(x) = θ0+θ1x （学习算法的解决方案或函数，将 x’s 映射到 y’s） ✎损失函数 (Cost function) Hypothesis: hθ(x) = θ0+θ1x , 参数 θi’s 如何选择？ 情形一：假定 θ0 = 0，Cost function 变为 J(θ1) 情形二：θ0，θ1 都可变，Cost function 为 J(θ0, θ1) ✎]]></content>
      <categories>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>machine learning</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Machine Learning 笔记（一）：背景，应用领域，基本概念]]></title>
    <url>%2F2019%2F05%2F05%2Fmachine-learning-course-notes%2Fml-note1%2F</url>
    <content type="text"><![CDATA[人工智能、机器学习，数据挖掘，神经网络之间的关系： ✎关于课程内容 ✎实践的机器学习和数据挖掘技术 基本概念，核心工具 学习系统的框架, 优化方法, 分类, 回归, 聚类,关联规则， 链接分析 主流技术，典型实际问题的解决方法 深度神经网络， Boosting/随机森林+决策树 并行化机器学习算法（大数据下的机器学习） 应用: 搜索引擎、推荐系统、图像搜索，量化交易等 Kaggle, PASCAL VOC，腾讯社交广告预测比赛，百度快速人像 识别比赛经验分享 ✎Machine Learning Part Optimization method（优化方法） Gradient descent（梯度下降） Stochastic gradient descent（随机梯度下降） Coordinate descent（坐标下降） Regression Linear regression（线性回归） Classification（分类） Logistic Regression (Parallelization)（逻辑回归（并行化）） Boosting + decision trees, Random Forest (Parallelization) Deep Neural Networks（深度神经网络） Clustering（聚类） K-means Recommendation Systems（推荐系统） matrix factorization / field-aware factorization machines ✎Data Mining Part Association Rules Similarity Search Learning to hash Link Analysis Page Rank ✎背景 ✎软件的现状 过去十多年，我们开发的软件系统主要是收集数据 ERP系统=单据电子化 邮件系统=信件电子化 企业运作产生大量的数据 互联网的网页/图片/视频数据 互联网/移动应用中的用户行为数据 金融行情/交易数据，各种经济数据，上市公司财务数据 监控摄像头（小区，交通，商铺）或其他传感器产生的数据 医疗数据 … ✎软件的未来 从收集数据到分析数据，市场上需要“聪明”的软件 能否给我推荐我喜欢的电影/衣服/新闻/游戏/朋友？ 汽车/无人机能否自动驾驶？工业机器人能否代替工人？ 机器能否理解图片内容、视频内容、自然语言？ 机器能否代替人工决策？ … ✎工业中的机器学习 大规模数据+人工特征+线性模型为主 高质量的人工特征（特征工程）+并行化训练+高吞吐量 预测 中等规模的数据，可用非线性模型（如Boosting+决策树， 随机森林） 深度学习 在一些难以获得高质量人工特征的应用中获得巨大成功 图像/视频/语音/自然语言理解，广告点击率预估 关键技术 并行化（分布式）学习算法，内存/训练时间限制 典型场景：给你1000台机器， 10000GB数据，要求你的算法在1小时内完 成训练 高吞吐量预测 典型场景：每个CPU每秒钟要完成800-1000个预测 模型稳定性 增量训练 机器学习人才需求 Developer：负责实现并行化、高吞吐量的算法；特征工程 Researcher：设计新的机器学习算法，提升算法的效果（如准确率） ✎应用成果 微软的“同声翻译” Google 的语言机器人助手 AlphaGo 击败人类顶尖棋手 网页分类 垃圾邮件过滤 手写识别 人脸识别 搜索引擎结果排序 机器翻译 广告排序，广告推荐 相似图片搜索 相机中的人脸检测 ✎基本概念 ✎machine learning vs. data mining 机器学习：从数据中自动分析获得规律，并利用规律对未知数据进行预测 数据挖掘：“数据模型”的发现过程，即从数据中发现有用的“规律” 机器学习擅长的典型场景是人们对数据中的寻找目标（规律）几乎一无所知，例如Netflix电影推荐。但是，当挖掘的目标能够比较清楚地描述时，机器学习的方法并不成功。例如“在web上定位人们的简历”，基于规则的方法优于机器学习方法。 ✎机器学习类型 有监督学习 (Supervised Learning)：从标签化的训练数据集中推导出预测函数的过程，即对训练数据集中的每个样本，都给出对应的“正确答案”（标签 (label)）。 可根据输出变量的类型分为 分类 和 回归 两类： 分类 (classification)：离散变量预测，为定性输出； 回归 (regression)：连续变量预测，为定量输出。 无监督学习 (Unsupervised Learning)：从无标签的训练数据集中推导出预测函数的过程，即只给定训练数据集，不给结果（标签）。 聚类 (clustering)：无监督学习的方法。聚类的结果是产生一组集合，一个集合中的对象与同集合中的对象彼此相似，与其他集合中的对象相异。 半监督学习 (Semi-supervised learning)：有监督学习和无监督学习的中间带。对于半监督学习，其训练数据一部分是有标签的，另一部分没有，而且没标签的数据量一般远大于有标签的数据量（这符合现实情况）。隐藏在半监督学习下的基本规律：数据的分布必然不是完全随机的，通过一些有标签数据的局部特征，以及更多没标签数据的整体分布，就可以得到可以接受甚至是非常好的分类结果。 可根据不同的学习场景分为四大类： 半监督分类 (Semi-supervised classification)：在无标签样本的帮助下使用有标签样本进行训练，获得比只用有标签样本训练得到的分类器性能更优的分类器，弥补有标签样本的数据量不足的缺陷，其中标签取有限离散值。 半监督回归 (Semi-supervised regression)：在无标签样本的帮助下使用有标签样本进行训练，获得比只用有标签样本训练得到的回归器性能更优的回归器，弥补有标签样本的数据量不足的缺陷，其中标签取连续值。 半监督聚类 (Semi-supervised clustering)：在有标签样本的信息帮助下，获得比只用无标签的样本得到的结果更好的簇，提高聚类的精度。 半监督降维 (Semi-supervised dimensionality reduction)：在有标签的样本的信息帮助下找到高维输入数据的低维结构，同时保持原始高维数据和成对约束 (Pair-wise constraints) 的结构不变，即在高维空间中满足正约束 (Must-link constraints) 的样例在低维空间中相距很近，在高维空间中满足负约束 (Cannot-link constraints) 的样例在低维空间中距离很远。 开启 Machine Learning 学习之旅！]]></content>
      <categories>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>machine learning</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[IntelliJ IDEA 配置 Tomcat 运行 Java Web 项目]]></title>
    <url>%2F2019%2F05%2F04%2Fidea%2Fidea-add-tomcat%2F</url>
    <content type="text"><![CDATA[✎Tomcat 下载、安装 ✎下载 Tomcat 在哪下载？ Tomcat 官网，点击左侧 Download 下的对应版本 进入 Tomcat 9 下载页面，zip 是免安装版，installer 是安装版 ✎安装 Tomcat zip: 直接解压缩即可；找到目录 bin 下的 startup.bat：启动 Tomcat；shutdown.bat：关闭 Tomcat。 installer: 打开 exe 安装文件，一路 Next 即可。 ✎验证 启动 Tomcat，打开浏览器，键入 http://localhost:8080，能打开页面则表示安装成功！ ✎IDEA 配置 Tomcat Run -&gt; Edit Configurations… -&gt; Templates -&gt; Tomcat Server -&gt; Local 标注1：点击 Configure, 在弹窗中选择 Tomcat 安装目录； 标注2：当 Tomcat 启动后，idea 会按照配置的地址打开浏览器页面； 标注3：当修改 java 文件后，如何处理？选择重启服务器； 标注4：jre 选择，最好选择本地的 jdk 中的 jre。 ✎配置项目部署 点击 + 号 -&gt; Tomcat Server -&gt; Local 切换到 Deployment 选项卡，点击右边 + 号，选择 Artifact 选择要部署的项目（如果要用 Tomcat 运行多个项目，直接在这里添加即可，注意 Application context 的选择） 点击 OK，配置完成！ ✎运行 Web 项目 如下图，选中 tomcat，点击运行按钮即可自动部署项目，可以看到启动日志 部署完成后会自动打开浏览器 项目部署成功！]]></content>
      <categories>
        <category>IDEA 配置</category>
      </categories>
      <tags>
        <tag>idea</tag>
        <tag>Tomcat</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[IntelliJ IDEA 上传项目到 Github]]></title>
    <url>%2F2019%2F05%2F03%2Fidea%2Fidea-add-git%2F</url>
    <content type="text"><![CDATA[环境前提：IntelliJ IDEA, Github 账号，Git 配置 ✎配置 Git 和 Github File -&gt; Setting -&gt; Version Control -&gt;Git 在 Path to Git executable 选择 git 安装后的 git.exe 文件，然后点击 Test，测试设置是否成功 File -&gt; Setting -&gt; Version Control -&gt;GitHub 点击 + 进行 Add account, 填写 Github 账号的用户名和密码，Log in ✎创建本地仓库 VCS -&gt; Import into Version Control -&gt; Create Git Repository… 在弹窗中选择项目所在的本地目录，点击 OK，此时项目文件全部变成红色 ✎上传项目到本地仓库 项目上右键 -&gt; Git -&gt; Add, 此时项目文件变成绿色（文件处于暂存区，并没有进入到版本库） 项目上右键 -&gt; Git -&gt; Commit Directory 在弹窗中输入 Commit Message，点击 commit，此时项目文件从暂存区进入版本库中，项目文件变成白色 ✎上传项目到 Github 远程仓库 VCS -&gt; Import into Version Control -&gt; Share Project on GitHub 在弹窗中输入仓库名和描述，点击 Share, 即开始在 Github 中创建远程仓库并上传项目文件（若未配置 Github, 会弹窗要求输入用户名和密码） 注意：会进行语法检查，若存在错误或警告会给出确认提示，点击 Commit 即可 上传成功后 IDEA 右下角会给出提示 查看 Github 远程仓库，项目上传成功！ ✎提交修改 项目上右键 -&gt; Git -&gt; Add, 将修改加入本地仓库暂存区 项目上右键 -&gt; Git -&gt; Commit Directory, 查看有变动的文件并输入 Commit Message, 点击 Commit and Push… 弹出 Push 框，点击 Push 查看 Github 远程仓库，提交修改成功！ ✎其他仓库操作]]></content>
      <categories>
        <category>IDEA 配置</category>
      </categories>
      <tags>
        <tag>github</tag>
        <tag>idea</tag>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[IntelliJ IDEA 创建 Maven Web App 项目]]></title>
    <url>%2F2019%2F04%2F26%2Fidea%2Fidea-add-maven%2F</url>
    <content type="text"><![CDATA[✎安装 Maven ✎下载 Maven 在哪下载？ Maven 官网 下载完成后，将 tar.gz 压缩包解压即可。 ✎配置环境变量 老生常谈，懒得写了！ 配置完，验证： Maven 安装完成！ ✎配置 Maven 本地仓库 ✎在 IntelliJ IDEA 中配置 Maven File -&gt; Settings ✎创建 Web App 项目 以 秒杀系统 (seckill) 项目为例 Create New Project 项目创建完成！]]></content>
      <categories>
        <category>IDEA 配置</category>
      </categories>
      <tags>
        <tag>tutorial</tag>
        <tag>idea</tag>
        <tag>maven</tag>
        <tag>webapp</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[IntelliJ IDEA 安装及使用教程]]></title>
    <url>%2F2019%2F04%2F21%2Fidea%2Fintellij-idea-tutorial%2F</url>
    <content type="text"><![CDATA[✎前言 IntelliJ IDEA（简称 IDEA），是 Java 语言开发的集成环境，IDEA 在业界被公认为最好的 Java 开发工具之一，尤其在智能代码助手、代码自动提示、重构、J2EE 支持、各类版本工具（Git、SVN、GitHub 等）、JUnit、CVS 整合、代码分析和创新的 GUI 设计等方面的功能都值得称道。 来开始领略 IntelliJ IDEA 的魅力吧！ ✎IDEA 安装全过程 系统环境：Windows 10 ✎下载 在哪下载？ IntelliJ IDEA 官网 在 Download IntelliJ IDEA 页面，我们可以看到 IntelliJ IDEA 分为两个版本，分别为： 旗舰版（Ultimate） 社区版（Community） 其中，旗舰版为收费版本，有 30 天试用期。社区版则是免费的，但功能较旗舰版少了很多。如果想用 IntelliJ IDEA 进行大型项目开发的的话，上旗舰版准没错。 ✎安装 双击打开 .exe 文件 软件占用空间较大，可修改安装目录，避免占用 C盘 存储空间 Options 的含义： 标注 1：表示在桌面上创建一个 IntelliJ IDEA 的快捷方式 标注 2：表示将启动器添加到环境变量中 标注 3：表示在右键菜单中添加 open folder as project 选项 标注 4：表示关联 .java、.groovy 和 .kt 文件 标注 5：表示下载和安装 JBR x86 在这里，选择默认的 JetBrains 文件夹就可以，点击 Install，进行安装： 安装完成！ ✎激活 若资金允许，请 购买正版，支持正版，人人有责 在 IntelliJ IDEA 注册码 下载破解补丁 将 破解补丁 放置到 IntelliJ IDEA 安装目录下 进入 bin 目录，找到 idea.exe.vmoptions 和 idea64.exe.vmoptions 两个文件 用文本编辑器打开这两个文件，在末尾添加 -javaagent:[破解补丁的文件路径] 保存后打开软件 在此处，选择 Darcula 黑色 UI 主题（个人喜好）并点击 Next: Default plugins，进入到默认插件配置页面： 跳过，点击 Next: Featured plugins，进入到特色插件配置页面： 跳过，点击 Start using IntelliJ IDEA，进入激活页面： 在 IntelliJ IDEA 注册码 复制注册码（该注册码一段时间后会过期，后续激活 也是找到该网站继续获取注册码填入即可），点击 OK，进入 IntelliJ IDEA 的启动界面，待进度条走完之后，就可以使用 IntelliJ IDEA 来打代码啦！ ✎使用 IDEA ✎界面详述、创建项目 打开 IntelliJ IDEA，首先迎接我们的就是这个界面： Create New Project : 创建一个新的项目； Import Project : 导入一个已有的项目，用于导入不属于 idea 模型的项目，如 Eclipse, Maven 项目； Open : 打开一个已有的项目，用于打开 idea 项目； Check out from Version Control :可以通过服务器上的项目地址 Checkout（俗称：检出） 项目。 点击 Create New Project，进入如下界面： 标注 1：IntelliJ IDEA 支持的框架及语言； 标注 2：与 标注 1 相对应的框架或语言的进一步分类。 选择 Java -&gt; Java EE，在 Project SDK 选择接下来我们的项目中所使用的 SDK（在这里是事先安装好的 JDK），然后点击 Next，进入下一步： 可以选择 Create project from template 快速创建项目 Command Line App 会自动创建一个带有main方法的类； Java Hello World 会自动创建一个带有main方法的并且会打印输出 Hello World 的类。 在这里，我们们不勾选使用模板，手工创建，直接点击 Next，进入如下界面： Project name : 项目名称（自定义，一般都小写，多个单词用下划线连接） Project location : 项目存储地址 Module name : 模块名称（默认与项目名称相同） Content root : 内容根路径 Module file location : 模块文件存储地址 Project format : 项目格式 （在 IntelliJ IDEA 中，Project 是最大单元，没有类似于 Eclipse 的工作空间（Workspace）的概念，但是我们可以在一个 Project 下创建多个 Module，默认是一个 Project 下创建一个Module，因此才出现项目名称与模块名称默认相同的现象。一般情况下，我们不需要在 More Settings 中进行修改。） 接下来，点击 Finish，完成项目的创建： （对于首次创建或打开的新项目，IntelliJ IDEA 都会创建项目索引，大型项目在创建索引的过程中可能会出现卡顿的现象，因此强烈建议在 IntelliJ IDEA 创建索引的过程中不要动项目。） 标注 1：项目结构图 标注 2：外部库 在项目结构图中，src 目录为默认的 Source root，我们一般在该目录下创建包和类；在外部库中，显示了我们导入的 JDK 1.8 版本。 编辑 Hello World 项目： 创建包：将鼠标移动到 src 目录上，然后点击右键，选择 New，再选择 Package，输入包名 demo，点击 OK; 新建类：将鼠标移动到 src 目录上，然后点击右键，选择 New，再选择 Java Class，输入类名 HelloWorld（一般情况下，如果类名出现多个单词的话，则每个单词的首字母都大写），点击 OK; 类创建完之后，在编辑区敲入代码，点击鼠标右键，选择 Run 'HelloWorld.main()'，运行。 标注 1：存放 Module 编译文件的 out 目录。 标注 2：demo包 和 HelloWorld类 标注 3：代码编辑区 标注 4：运行结果，输出&quot;Hello World!&quot; .idea：Project 的配置文件目录，配置文件以 XML 文件的形式存在，因此我们也可以通过了解这些 XML 文件来了解 IntelliJ IDEA 的相关配置。 hello_world.iml：IntelliJ IDEA 为每个 Module 自动生成的配置文件，一般情况下，我们不需要动它。 （IntelliJ IDEA 是一个没有 Ctrl + S 的 IDE，因此每次修改完代码之后，咱们只管运行或者调试即可，无需担心保存或者丢失代码的问题。） ✎使用技巧 学习慕课网课程 IntelliJ IDEA神器使用技巧，总结出的思维导图]]></content>
      <categories>
        <category>Java开发环境搭建</category>
      </categories>
      <tags>
        <tag>tutorial</tag>
        <tag>idea</tag>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Win10 安装 JDK 及配置环境变量]]></title>
    <url>%2F2019%2F04%2F20%2Fjava%2Fjdk-install-tutorial%2F</url>
    <content type="text"><![CDATA[✎下载 JDK 下载地址：Oracle 官网 可能需要登录，分享一个账号，方便下载 用户名：2696671285@qq.com 密码：Oracle123 ✎安装 JDK、JRE 安装过程非常简单，首先双击打开 JDK 可执行文件 jdk-8u211-windows-x64.exe。JDK 默认安装在 C:\Program Files 目录下，可以修改安装路径，然后点击 &lt;下一步&gt;，等待安装完成即可。 JDK 安装完成后，会进入如下界面。该界面是安装与 JDK 同版本的 JRE，其实在 JDK 中已经包含 JRE 了，因此这个 JRE 实际上并没有起什么作用，安装也没有什么问题。在这里，我们选择安装，点击 &lt;下一步&gt;，等待安装完成即可。 安装完成后，会进入如下界面。如果有需要的话，点击 &lt;后续步骤&gt;，将会访问教程、API 文档和开发人员指南等内容；否则的话，直接点击 &lt;关闭&gt; 就 ojbk 啦！ ✎配置环境变量 “此电脑”右击选择“属性” -&gt; 高级系统设置 -&gt; 高级 -&gt; 环境变量 -&gt; 新建 新建变量，变量名为 JAVA_HOME，变量值为 C:\Program Files\Java\jdk1.8.0_211 ( 即 JDK 安装目录 )，点击 &lt;确定&gt;，然后打开 PATH 变量进行编辑，将 ;%JAVA_HOME%\bin 追加到 PATH 变量值的最后面。 ✎验证 打开 cmd，输入 java -version 和 javac -version，结果如下图则说明 JDK 安装及环境变量配置成功。]]></content>
      <categories>
        <category>Java开发环境搭建</category>
      </categories>
      <tags>
        <tag>tutorial</tag>
        <tag>java</tag>
        <tag>jdk</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java 从入门到放弃]]></title>
    <url>%2F2019%2F04%2F20%2Fjava%2Fjava-learning-history%2F</url>
    <content type="text"><![CDATA[吾日三省吾身，三次都发现自己菜得抠脚，遂决定踏上 Java 工程师的修炼之路。 路漫漫其修远兮，吾将上下而求索。 本篇将记录自己的 Java 学习历程，保持持续更新！ ✎开发环境搭建 工欲善其事，必先利其器。 ✎安装 JDK 和 JRE 参考 Win10 安装 JDK 及配置环境变量 JDK ( Java Development Kit ) : java 开发工具包，是程序员使用 java 语言编写的 java 程序所需的开发工具包，是提供给程序员使用的。JDK 包含了JRE、编译 java 源码的编译器javac、java 程序调试和分析的工具：jconsole，jvisualvm等工具软件，还包含了java 程序编写所需的文档和 demo 例子程序。 JRE ( Java Runtime Environment ) : java 运行时环境，包含了 java 虚拟机、java 基础类库。是使用 java 语言编写的程序运行所需要的软件环境，是提供给想运行 java 程序的用户使用的。 ✎IDE 选择与安装 My choice: IntelliJ IDEA IntelliJ IDEA（简称 IDEA），是 Java 语言开发的集成环境，IDEA 在业界被公认为最好的 Java 开发工具之一，尤其在智能代码助手、代码自动提示、重构、J2EE 支持、各类版本工具（Git、SVN、GitHub 等）、JUnit、CVS 整合、代码分析和创新的 GUI 设计等方面的功能都值得称道。 安装与使用 参考 IntelliJ IDEA 安装及使用教程 ✎入门篇 ✎Java 语法 如何学习？ Runoob 网站 网站可以让你对任意一门语言完成快速的语法门。 My method：快速浏览 Runoob 网站的 Java 教程，跟 C++ 语法对照着进行学习。（C++ 已学） ✎Java 核心技术 如何学习？ 网课：现在有很多 Java 课程，挑选一个完整地学习即可； 书：《Java 核心技术》 卷 Ⅰ 和 卷 Ⅱ，跳过一些过时的内容； 代码实践：尽量把网课和书中的代码实现一遍。 ✎初级篇]]></content>
      <categories>
        <category>Java学习</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo 下 Markdown 的配置与学习]]></title>
    <url>%2F2019%2F04%2F14%2Fhexo%2Fhexo-md%2F</url>
    <content type="text"><![CDATA[本篇 更换 Hexo 下的 Markdown 渲染插件 学习 Markdown 基本语法 ✎更换 Markdown 渲染插件 ✎原因 Hexo 内置的默认渲染插件是 hexo-renderer-marked，缺少很多功能，比如 GFM (GitHub Flavored Markdown)、上下标、脚注、emoji 等 ✎hexo-renderer-markdown-it 插件 hexo-renderer-markdown-it 插件支持大量扩展功能，可以实现 Hexo 博客的 footnote 功能。 hexo-renderer-markdown-it ✎安装，配置插件 参考 Wiki 文档 先卸载原有的 hexo-renderer-marked 插件 1$ npm un hexo-renderer-marked --save 安装 hexo-renderer-markdown-it 插件 1$ npm i hexo-renderer-markdown-it --save 使用 Advanced configuration，向 站点配置文件 添加 12345678910111213141516171819202122# Markdown-it config## Docs: https://github.com/celsomiranda/hexo-renderer-markdown-it/wikimarkdown: render: html: true xhtmlOut: false breaks: true linkify: true typographer: true quotes: &apos;“”‘’&apos; plugins: - markdown-it-abbr - markdown-it-footnote - markdown-it-ins - markdown-it-sub - markdown-it-sup anchors: level: 2 collisionSuffix: &apos;v&apos; permalink: true permalinkClass: header-anchor permalinkSymbol: ¶ ✎Markdown 基本语法 ✎文章头基本格式 123456789---title: 如何搭建个人博客网站(二)date: 2019-04-13 23:46:39tags: - tutorial - github - hexocategories: 教程--- ✎斜体和粗体 12*斜体***粗体** 渲染效果：这是 斜体，这是 粗体 ✎分级标题 格式一： 1234567这是一个一级标题============================这是一个二级标题--------------------------------------------------### 这是一个三级标题 格式二： 123456# H1## H2### H3#### H4##### H5###### H6 ✎分割线 在单独的一行使用 *** 或者 --- 表示分割线 ✎删除线 1~~应该不经常用~~ 渲染效果：应该不经常用 ✎超链接 插入文字超链接 1[显示文字](链接地址) 插入图片 1![图片说明](图片地址) 插入音频，使用插件 hexo-tag-aplayer 1&#123;% aplayer title author url [picture_url, narrow, autoplay, width:xx%, lrc:xxx] %&#125; 具体使用方法参考：hexo-tag-aplayer 使用文档 插入视频，使用 iframe 代码 12&lt;script src=&quot;/js/youtube-autoresizer.js&quot;&gt;&lt;/script&gt;&lt;iframe width=&quot;800&quot; height=&quot;450&quot; src=&quot;视频链接&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt; ✎转义符 \ 后面的文字解析为纯文本格式，用来显示特殊符号。 例如： ## 不会解析为标题 ✎引用 使用 &gt; 来显示文字引用 渲染效果： 世界上只有一种真正的英雄主义，那就是在认识生活的真相后依然热爱生活。 ✎脚注 使用 [^1] [^1]: 的脚注对来表示（1 只是标识，用其他字符也行，但要相对应） 12Here is a footnote reference.[^note][^note]: Here is the footnote. Here is a footnote reference.[1] ✎列表与表格 ✎无序列表 使用 * + - 表示无序列表 123456+ 无序列表项 一 - 子无序列表 一 - 子无序列表 二 * 子无序列表 三+ 无序列表项 二+ 无序列表项 三 渲染效果： 无序列表项 一 子无序列表项 一 子无序列表项 二 子子无序列表项 一 无序列表项 二 无序列表项 三 ✎有序列表 使用 数字 和 . 表示有序列表 123451. 有序列表项 一 1. 子有序列表项 一 2. 子有序列表项 二2. 有序列表项 二3. 有序列表项 三 渲染效果： 有序列表项 一 子有序列表项 一 子有序列表项 二 有序列表项 二 有序列表项 三 ✎表格 绘制表格格式如下，| 控制分列，- 控制分行，: 控制对齐方式 12345| SID | Name | grade || :-- | ---: | :---: || 001 | Bob | 65 || 002 | Andy | 80 || 003 | John | 77 | 渲染效果: SID Name grade 001 Bob 65 002 Andy 80 003 John 77 ✎代码块 ✎行内代码块 使用 `codes` 表示行内代码块 ✎多行代码块 将代码块置于两个 ``` 中间（可在第一个 ``` 后面指定代码所属的编程语言） 支持多种编程语言的语法高亮的显示，行号显示 非代码示例： 1This is a code block. c++ 示例： 1234567#include &lt;iostream&gt;using namespace std;int main()&#123; cout &lt;&lt; "Hello World!" &lt;&lt; endl; return 0;&#125; Here is the footnote. ↩]]></content>
      <categories>
        <category>个人博客网站搭建</category>
      </categories>
      <tags>
        <tag>markdown</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[如何搭建个人博客网站(二)]]></title>
    <url>%2F2019%2F04%2F13%2Fhexo%2Fbuild-my-website02%2F</url>
    <content type="text"><![CDATA[本篇 更换个人博客网站的主题，使 UI 更符合个人审美 开始写博客 ✎更换主题 ✎挑选你的主题 官网：Hexo Themes Github：Themes hexojs 知乎：有哪些好看的 Hexo 主题? My choice: hexo-theme-next ✎下载 Next 主题 克隆整个 hexo-theme-next 仓库 12$ cd hexo$ git clone https://github.com/theme-next/hexo-theme-next themes/next ✎启用主题 与所有 Hexo 主题启用的模式一样。 当 克隆/下载 完成后，打开 站点配置文件， 找到 theme 字段，并将其值更改为 next。 ✎验证主题 123$ hexo clean #清除Hexo缓存$ hexo g #生成静态文件$ hexo s #启动服务器 此时即可使用浏览器访问 http://localhost:4000，检查站点是否正确运行。 ✎主题设定 可以个性化设置主题的 Scheme、语言、菜单、侧栏、头像等; 具体操作参考 NexT 使用文档 最后效果： ✎写博客啦 ✎创建一个博客 1$ hexo new &apos;first-blog&apos; 此时在 username.github.io/source/_posts 目录下新建了一个 first-blog.md 的 Markdown 文件，打开 md 文件后编辑即可。 ✎编辑博客 Hexo 的博客都是用 Markdown 写的 Markdown 语法可参考我的下一篇博客：Hexo 下 Markdown 的配置与学习]]></content>
      <categories>
        <category>个人博客网站搭建</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>tutorial</tag>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[如何搭建个人博客网站(一)]]></title>
    <url>%2F2019%2F04%2F13%2Fhexo%2Fbuild-my-website01%2F</url>
    <content type="text"><![CDATA[本篇基于 Github 和 Hexo 搭建个人博客网站。 系统：Windows 10 ✎环境前提 Node.js: 直接在官网下载安装，下载地址 Github, Git: 推荐 Github入门教程 ✎新建个人 Blog 主页的仓库 打开 Github 首页，登录后新建一个 repository, 名称为 username.github.io ( [username] 必须为 Github 账号，比如我的账号为 JozeOu, 那么仓库名必须为 jozeou.github.io) ✎使用 Hexo 创建 Blog 项目 使用 npm 安装 hexo 1$ npm install -g hexo-cli 在存放 Blog 项目的目录下 Git Bash Here, 初始化 Blog 项目 12$ hexo init username.github.io$ cd username.github.io 安装依赖包 1$ npm install 安装 Git 部署 1$ npm install hexo-deployer-git --save 本地查看 12$ hexo g #生成静态文件$ hexo s #启动服务器。默认情况下，访问网址为：http://localhost:4000/ ✎将 Blog 项目部署到 Github 复制 username.github.io 仓库的 SSH 码 编辑站点配置文件：打开 Blog 项目目录中的_config.yml 文件，把刚刚复制的 SSH 码粘贴到 repository（注意冒号后要空一格） 1234deploy: type: git repository: git@github.com:username/username.github.io.git branch: master 部署 1234$ hexo g #生成静态文件$ hexo d #部署或$ hexo g -d #文件生成后立即部署网站 部署成功后即可在浏览器中输入 username.github.io 访问 如何配置网站信息及 Hexo 项目文件结构解释参考 Hexo 官方文档]]></content>
      <categories>
        <category>个人博客网站搭建</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>tutorial</tag>
        <tag>github</tag>
      </tags>
  </entry>
</search>
